1) 작성된 파이썬 모듈(파일)들이 개별 디렉토리에 넣어 패키지로 관리되는 경우, 각 디렉토리에 __init__.py 파일을 생성해주어야한다.
   (파일 이름명 준수. 파일 내용은 empty 상태로.)
   __init__.py 파일은 해당 디렉토리가 패키지로 인식되도록 한다.하여 다른 디렉토리에서 접근할(import) 수 있도록 만들어 준다.  
   (VS Code에서 실행시엔 큰 문제가 없지만, cmd 창 또는 빌드된 exe로 실행시에 개별 디렉토리의 모듈을 찾지 못하여 에러 발생됨)  


2) anaconda prompt 실행하여 pyinstaller 설치되어있는지 확인
  --> 확인 commend >> pip show pyinstaller
  --> 설치 안되있으면 설치 >> pip install pyinstaller

3) anaconda prompt에서 빌드를 진행할 사용자 프로젝트의 경로로 이동한다. (cd 경로명)
  

4) anaconda prompt에서 아래 명령어 입력하여 빌드를 진행 한다.
  * 모든 모듈파일이 통합된 하나의 exe 파일로 빌드하고 싶으면 '-onefile' 옵션 추가
	pyinstaller --onefile --icon=TMM.ico main.py 


5) 프로젝트에 이상이 없다면 빌드는 정상 완료되며, 그 결과물로 build, dist 폴더 및 main.spec 파일이 생성된다


6) dist 폴더에서 main.exe 실행 파일을 확인할 수 있다.
   프로젝트에 문제가 있는 경우, exe 파일 실행 시 에러 메세지와 함께 실행 실패 됨 
   (cmd 창에서 exe 파일 실행하여 에러 메세지 확인 가능)
   아래의 경우 하나의 exe 파일로 빌드시 발생할 수 있는 에러 케이스이며, 
   이럴 경우 main.spec 파일 편집기로 열고 아래의 추가 설정 작업 진행해야 한다.

	6-1) dll 파일을 찾을 수 없다는 에러 메세지 출력 -> spec 파일에 사용자 DLL파일 정보를 배열에 담아 'datas' 속성에 연결

		a = Analysis(
		    ['main.py'],
		    pathex=[],
		    binaries=[],
		    datas=[
		        ('variable/include_x64/EziMOTIONPlusE.dll', 'variable/include_x64'),  # DLL 포함
 		   ],
 		   hiddenimports=[],
 		   hookspath=[],
 		   hooksconfig={},
 		   runtime_hooks=[],
 		   excludes=[],
  		  noarchive=False,
 		   optimize=0,
		)
	
	
7) 위와 같이 main.spec 파일 내용을 수정한 경우, anaconda prompt에서 아래 명령어로 입력하면 정상적으로 빌드가 수행된다.
   --> pyinstaller main.spec        *****주의	>> 처음에는 .py로 빌드했으나 수정후에는 반드시 .spec로 빌드해야 수정한 내용이 반영됨. 
										    	>> 만약 수정 후 .py로 다시 빌드한 경우. 수정한 내용이 없어지므로 다시 수정해야함
   
